<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>Offset</title>
	<script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
	<script type="text/javascript" src="js/paperjs/dist/paper.js"></script>
	<script type="text/javascript" src="js/offsetPath.js"></script>
	<script type="text/javascript">
		
	var debugGroup;
	var loadedItem;
		
	paper.install(window);
	
	$( document ).ready(function() {
  		var canvas = document.getElementById('canvas');
		paper.setup(canvas);
		
		var file = document.getElementById('file');
		file.addEventListener('change', function (event) {
			var files = event.target.files;
			for (var i = 0; i < files.length; i++) {
				var file = files[i];
				if (file.type.match('svg')) {
					project.activeLayer.removeChildren();
					project.importSVG(file, function(item) {
					
						loadedItem = item;
					
						if (true) {
							view.zoom = 1;
						
							// scale item
							var w1  = item.bounds.width;
							var h1 = item.bounds.height;
							var aspect = w1/h1;
							var vw = view.size.width;
							var vh = view.size.height;
							var va = vw/vh;
							
							var scale = 1;
					
							if (aspect > va) {
								scale = vw / w1;
							} else {
								scale = vh / h1;
							}
							
							// scale to fit bed
							item.transformContent = true;
							//item.scale(scale);
						
							// position at top left of view
							var delta = new Point(item.bounds.left, item.bounds.top);
							item.position = item.position.subtract(delta);
							
							// reset view
							//console.log(scale);
							//view.zoom = scale * 0.8;
							
							//console.log(item.position);
							//console.log(view.size);
							//console.log(item.bounds);
							
							//project.activeLayer.position.x = view.center.x;
							//project.activeLayer.position.y = view.center.y;
						
						}
						
						item.fillColor = new Color(0,0,0,0);
						item.strokeWidth = 1;
						item.strokeColor = new Color(0,0,0,0.1);
						
						
						
						recalc(true);
						
						
						
						view.draw();
						
						
						$('#output').val(
							'<svg x="0" y="0" width="'+view.viewSize.width+'" height="'+view.viewSize.height+'" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">'+
							project.exportSVG().innerHTML+
							'</svg>');
						
					});
				}
			}
		});
	
	
		view.draw();
		
		view.on('resize', function(event) {
			view.draw();
		});
		
		
		$('#recalc').on('click',function() {
		
			recalc(false);
		});
		
		function recalc(doReverse) {
			// do some stuff here
			if (debugGroup) debugGroup.remove();
			debugGroup = new Group();
			
			doThisToPaths(loadedItem,  function(p) {
			
				//p.simplify(0.1);
				
				joinCloseSegments(p, 0.5);
				
				removeCloseHandles(p, 0.1);
				
				
				var offset = Number($('#offset').val());
				
				// reverse?
				if (doReverse && $('#reverse').prop('checked')) {
					p.reverse();
				}
			
				
				/*
				var offsetPath = calcOffsetPath(p, offset, function (progress) {
					//console.log(progress);
				});
				*/
				
				//debugGroup = new Group();
				
				if ($('#stopAfter').val() == 0) $('#stopAfter').val(p.curves.length);
				
				//animatePathOffset(p, offset, 1, null);
				
				drawPathHandles(p, new Color(0,0,0,0.4));
				
				var offsetPath = calcOffsetPath(p, offset, null, null);
				if (offsetPath) 
					debugGroup.addChild(offsetPath);
				
				//drawControlCurves(offsetPath, 'orange');
			
			});
		}
		
		
		function animatePathOffset(p, offset, stopAfter) {
			
			if (debugGroup) debugGroup.remove();
			debugGroup = new Group();
				
			console.log('stopAfter',stopAfter);
			
			
			var offsetPath = calcOffsetPath(p, offset, null, stopAfter);
			if (offsetPath)
				debugGroup.addChild(offsetPath);
			
			view.draw();
			
			if (stopAfter < $('#stopAfter').val()) {
				stopAfter += 1;
				setTimeout(function() {
					animatePathOffset(p, offset, stopAfter);
				}, 200);
			}
		}
	
	
function copyToClipboard(text) {
  window.prompt("Copy to clipboard: Ctrl+C, Enter", text);
}
		
		
		$( "body" ).keydown(function( event ) {
		  switch (event.which) {
		  	case 187:	// zoom in
		  	 	event.preventDefault();
		   	  	view.zoom *= 1.2;
		  	  	break;
		  	
		  	case 189:	// zoom out
		  	  	event.preventDefault();
		   		view.zoom *= 0.8;
		  		break;
		  	
		  	case 37:	// left  
		  		event.preventDefault();
		   		project.activeLayer.position.x -= view.size.width/10;
		  		break;
		  		
		  	case 38:	// up  
		  		event.preventDefault();
		   		project.activeLayer.position.y -=view.size.width/10;
		  		break;
		  		
		  	case 39:	// right  
		  		event.preventDefault();
		   		project.activeLayer.position.x += view.size.width/10;
		  		break;
		  		
		  	case 40:	// down 
		  		event.preventDefault();
		   		project.activeLayer.position.y += view.size.width/10;
		  		break;
		  		
		  }
		  
		  view.draw();
		  
		  //console.log(event.which);
		  
		  
		});
	});
	
	
	function doThisToPaths(item, cb) {
		if (item.children && item.children.length > 0) {
			
			for (var i=0; i<item.children.length; i++) {
				doThisToPaths(item.children[i], cb);
			}
		} else if (item._class == 'Path') {
			cb(item);
		}
	}

	</script>
</head>
<body>
	<form>
	<input type="checkbox" id="reverse" value="reverse">
	<input id="stopAfter" value="0">
	<input id="offset" value="5">
	<input type="file" id="file">
	<input id="recalc" type="button" value="Recalc">
	<textarea id="output"></textarea>
	</form>
	<canvas id="canvas" resize></canvas>
</body>
</html>